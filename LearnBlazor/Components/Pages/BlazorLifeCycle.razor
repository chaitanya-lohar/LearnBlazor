
@page "/lifecycle"
@using System.Threading

<h3 class="text-success">Blazor Life Cycle</h3>
<PageTitle>Blazor Life Cycle</PageTitle>

<p role="status">Current count: @currentCount</p>

<div class="m-1">Count : @Count 

    <button class="btn btn-dark" @onclick="startCountDown">Count Down</button>
</div>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<div class="border m-1">
    <_LifeCycleChild CountValue="@currentCount"></_LifeCycleChild>
</div>

<hr />
@foreach (var item in EventTypes) { 
    <p>@item</p>
    <hr />
}

@code {
    private int Count { get; set; } = 5;

    public int currentCount = 0;

    public void IncrementCount()
    {
        currentCount++;
    }

    List<string> EventTypes { get; set; } = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        EventTypes.Add($"OnInitializedAsync is called {DateTime.Now.Nanosecond} ns");
    }

    protected override void OnInitialized()
    {
        EventTypes.Add($"OnInitialized is called {DateTime.Now.Nanosecond} ns");
    }

    protected override void OnParametersSet()
    {
        EventTypes.Add($"OnParametersSet is called {DateTime.Now.Nanosecond} ns");
    }

    protected override async Task OnParametersSetAsync()
    {
        EventTypes.Add($"OnParametersSetAsync is called {DateTime.Now.Nanosecond} ns");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        EventTypes.Add($"OnAfterRender is called {DateTime.Now.Nanosecond} ns");
    }

    // public override async Task SetParametersAsync(ParameterView parameters)
    // {
    //     EventTypes.Add($"SetParametersAsync is called {DateTime.Now.Nanosecond} ns");
    // }

    protected override bool ShouldRender()
    {
        EventTypes.Add($"ShouldRender is called {DateTime.Now.Nanosecond} ns");
        return true;
    }

    private void startCountDown() {
        var timer = new Timer(TimeCallBack, null,1000,10000);
    }

    private void TimeCallBack(object state)
    {
        if (Count > 0) {
            Count--;
            InvokeAsync(StateHasChanged);
        }
    }
}